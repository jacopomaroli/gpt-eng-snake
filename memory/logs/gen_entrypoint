[{"role": "system", "content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallell if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\n"}, {"role": "user", "content": "Information about the codebase:\n\nBased on the specification and tests, here is the implementation of the multiplayer snake game:\n\n`game.py`\n```python\nfrom dataclasses import dataclass\nimport random\n\n@dataclass\nclass Position:\n    x: int\n    y: int\n\nclass Snake:\n    def __init__(self, position):\n        self.body = [position]\n        self.direction = \"right\"\n\n    @property\n    def head_position(self):\n        return self.body[-1]\n\n    def move(self):\n        if self.direction == \"up\":\n            new_head = Position(self.head_position.x, self.head_position.y - 1)\n        elif self.direction == \"down\":\n            new_head = Position(self.head_position.x, self.head_position.y + 1)\n        elif self.direction == \"left\":\n            new_head = Position(self.head_position.x - 1, self.head_position.y)\n        elif self.direction == \"right\":\n            new_head = Position(self.head_position.x + 1, self.head_position.y)\n        self.body.append(new_head)\n\n    def grow(self):\n        self.body.insert(0, Position(-1, -1))\n\nclass Food:\n    def __init__(self):\n        self.position = None\n\n    def place(self):\n        x = random.randint(0, 19)\n        y = random.randint(0, 19)\n        self.position = Position(x, y)\n\nclass Player:\n    def __init__(self):\n        self.score = 0\n        self.snake = Snake(Position(10, 10))\n\n    def move(self, direction):\n        if direction == \"up\" and self.snake.direction != \"down\":\n            self.snake.direction = \"up\"\n        elif direction == \"down\" and self.snake.direction != \"up\":\n            self.snake.direction = \"down\"\n        elif direction == \"left\" and self.snake.direction != \"right\":\n            self.snake.direction = \"left\"\n        elif direction == \"right\" and self.snake.direction != \"left\":\n            self.snake.direction = \"right\"\n\nclass Game:\n    def __init__(self):\n        self.players = []\n        self.snakes = []\n        self.food = []\n        self.winner = None\n\n    def start(self):\n        self.players = [Player(), Player()]\n        self.snakes = [player.snake for player in self.players]\n        self.food = [Food()]\n\n    def update(self):\n        for snake in self.snakes:\n            snake.move()\n            if snake.head_position.x < 0 or snake.head_position.x > 19 or snake.head_position.y < 0 or snake.head_position.y > 19:\n                self.snakes.remove(snake)\n            elif len(snake.body) > 1 and snake.head_position in snake.body[:-1]:\n                self.snakes.remove(snake)\n            else:\n                for food in self.food:\n                    if snake.head_position == food.position:\n                        snake.grow()\n                        self.players[self.snakes.index(snake)].score += 1\n                        self.food.remove(food)\n                        self.food.append(Food())\n\n        if len(self.snakes) == 1:\n            self.winner = self.players[self.snakes.index(self.snakes[0])]\n\n    def end(self):\n        pass\n```\n\n`index.html`\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Multiplayer Snake</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <canvas id=\"canvas\"></canvas>\n    <div id=\"scoreboard\">\n        <div id=\"player1-score\"></div>\n        <div id=\"player2-score\"></div>\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n`style.css`\n```css\n#canvas {\n    border: 1px solid black;\n}\n\n#scoreboard {\n    display: flex;\n    justify-content: space-between;\n    margin-top: 10px;\n}\n\n#player1-score {\n    background-color: red;\n    color: white;\n    padding: 5px;\n}\n\n#player2-score {\n    background-color: blue;\n    color: white;\n    padding: 5px;\n}\n```\n\n`script.js`\n```javascript\nconst canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst player1Score = document.getElementById(\"player1-score\");\nconst player2Score = document.getElementById(\"player2-score\");\n\nconst socket = new WebSocket(\"ws://localhost:8000\");\n\nsocket.onmessage = function(event) {\n    const gameState = JSON.parse(event.data);\n    draw(gameState);\n    updateScoreboard(gameState);\n}\n\ndocument.addEventListener(\"keydown\", function(event) {\n    if (event.code === \"ArrowUp\" || event.code === \"ArrowDown\" || event.code === \"ArrowLeft\" || event.code === \"ArrowRight\") {\n        socket.send(event.code);\n    }\n});\n\nfunction draw(gameState) {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    for (let snake of gameState.snakes) {\n        ctx.fillStyle = snake.color;\n        for (let position of snake.body) {\n            ctx.fillRect(position.x * 20, position.y * 20, 20, 20);\n        }\n    }\n    for (let food of gameState.food) {\n        ctx.fillStyle = \"green\";\n        ctx.fillRect(food.position.x * 20, food.position.y * 20, 20, 20);\n    }\n}\n\nfunction updateScoreboard(gameState) {\n    player1Score.textContent = `Player 1: ${gameState.players[0].score}`;\n    player2Score.textContent = `Player 2: ${gameState.players[1].score}`;\n}\n```\n\n`server.py`\n```python\nimport asyncio\nimport json\nimport websockets\nfrom game import Game\n\nasync def game_loop(game):\n    while True:\n        game.update()\n        if game.winner != None:\n            break\n        await asyncio.sleep(0.1)\n\nasync def handle_player(websocket, path, game):\n    player_index = len(game.players)\n    game.players.append(None)\n    await websocket.send(json.dumps({\"playerIndex\": player_index}))\n    async for message in websocket:\n        game.players[player_index].move(message)\n\nasync def handle_game(websocket, path, game):\n    while True:\n        await websocket.send(json.dumps(game.__dict__))\n        await asyncio.sleep(0.1)\n\nasync def main():\n    game = Game()\n    game.start()\n    game_loop_task = asyncio.create_task(game_loop(game))\n    async with websockets.serve(lambda websocket, path: handle_player(websocket, path, game), \"localhost\", 8000):\n        await asyncio.gather(game_loop_task)\n    game.end()\n\nasyncio.run(main())\n```"}, {"role": "assistant", "content": "To install dependencies:\n```\npip install websockets\n```\n\nTo run the codebase:\n```\npython server.py\n```\n\nThen open `index.html` in a web browser."}]